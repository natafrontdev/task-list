{"version":3,"sources":["components/taskstore-service-context/taskstore-service-context.js","components/hoc/with-taskstore-service.js","actions/index.js","utils/compose.js","components/task-list-header/task-list-header.js","components/task-list-header/index.js","containers/task-list-header-container/index.js","components/task-sort/index.js","components/task-sort/task-sort.js","containers/task-sort-container/index.js","components/spinner/index.js","components/spinner/spinner.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/task-list-item/index.js","components/task-list-item/task-list-item.js","components/task-list/index.js","components/task-list/task-list.js","containers/task-list-container/index.js","components/pagination/index.js","components/pagination/pagination.js","containers/pagination-container/index.js","components/pages/home-page.js","components/forms/input/index.js","components/forms/input/input.js","components/login-form/index.js","components/login-form/login-form.js","containers/login-form-container/index.js","components/pages/login-page.js","components/forms/textarea/index.js","components/forms/textarea/textarea.js","components/task-create-form/task-create-form.js","components/task-create-form/index.js","containers/task-create-container/index.js","components/pages/task-create-page.js","components/task-edit-form/index.js","components/task-edit-form/task-edit-form.js","containers/task-edit-container/index.js","components/pages/task-edit-page.js","components/app/index.js","components/app/app.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","reducers/index.js","store.js","index.js","services/taskstore-service.js"],"names":["React","createContext","TaskstoreServiceProvider","Provider","TaskstoreServiceConsumer","Consumer","withTaskstoreService","Wrapped","props","react_default","a","createElement","taskstoreService","Object","assign","unAuthUser","isLogin","type","payload","fetchTasks","dispatch","page","sortField","getTasks","then","data","newtasks","currentPage","tasksLoaded","catch","err","compose","_len","arguments","length","funcs","Array","_key","comp","reduceRight","wrapped","f","ButtonAuth","_ref","isLoggedIn","onUnAuth","Link","to","onClick","className","TaskListHeader","_ref2","task_list_header_ButtonAuth","TaskListHeaderContainer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleUnAuth","components_task_list_header","Component","mapDispatchToProps","connect","TaskSort","onSort","buttons","map","name","label","btnClass","key","concat","TaskSortContainer","_this$props","components_task_sort","Spinner","ErrorIndicator","TaskListItem","task","id","username","email","text","status","pathname","TaskList","tasks","react","components_task_list_item","TaskListContainer","loading","error","components_spinner","components_error_indicator","components_task_list","Pagination","itemsPerPage","totalTaskCount","handleFirstPageButtonClick","handleBackButtonClick","handleNextButtonClick","handleLastPageButtonClick","aria-label","aria-hidden","Math","ceil","PaginationContainer","onChangePage","Number","max","components_pagination","HomePage","task_sort_container","task_list_container","pagination_container","Input","labelText","placeholder","value","pattern","title","isReadOnly","hasReadOnly","htmlFor","autoComplete","required","readOnly","LoginForm","onSubmit","forms_input","LoginFormContainer","state","authState","handleSubmit","bind","assertThisInitialized","event","preventDefault","FormData","target","get","password","isAdmin","authUser","setState","Redirect","components_login_form","LoginPage","login_form_container","Textarea","maxLength","defaultValue","InputName","isUserName","TaskCreateForm","userName","task_create_form_InputName","forms_textarea","TaskCreateContainer","postNewTask","document","getElementById","reset","components_task_create_form","TaskCreatePage","task_create_container","TaskEditForm","editTaskStatus","handleChecked","editTaskText","onChange","checked","TaskEditContainer","isEdit","encodeURI","str","replace","taskText","params","taskSignature","md5","create","update","paramsToServer","editTask","components_task_edit_form","ownProps","find","taskEditId","TaskEditPage","taskId","location","task_edit_container","App","role","task_list_header_container","Switch","Route","path","component","exact","ErrorBoundry","hasError","children","initialState","reducer","undefined","action","objectSpread","total_task_count","store","createStore","_apiBase","_apiDeveloper","getResource","_callee","url","res","regenerator_default","wrap","_context","prev","next","fetch","cache","redirect","referrer","sent","ok","Error","json","abrupt","stop","postResource","_callee2","_context2","method","body","editResource","_callee3","_context3","mode","credentials","headers","Content-Type","_callee4","sort_field","_context4","message","_callee5","formData","_context5","results","_callee6","_context6","ReactDOM","render","es","error_boundry","BrowserRouter","basename","components_app"],"mappings":"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","file":"static/js/main.804aba41.chunk.js","sourcesContent":["import React from 'react'\n\nconst {\n  Provider: TaskstoreServiceProvider,\n  Consumer: TaskstoreServiceConsumer\n} = React.createContext()\n\nexport {\n  TaskstoreServiceProvider,\n  TaskstoreServiceConsumer\n}\n","import React from 'react'\nimport { TaskstoreServiceConsumer } from '../taskstore-service-context'\n\nconst withTaskstoreService = () => (Wrapped) => {\n  return (props) => {\n    return (\n      <TaskstoreServiceConsumer>\n        {\n          (taskstoreService) => {\n            return (\n              <Wrapped {...props}\n                taskstoreService={taskstoreService} />\n            )\n          }\n        }\n      </TaskstoreServiceConsumer>\n    )\n  }\n}\n\nexport default withTaskstoreService\n","\nconst tasksRequested = () => {\n  return {\n    type: 'FETCH_TASKS_REQUEST'\n  }\n}\n\nconst tasksLoaded = (newtasks, currentPage, sortField) => {\n  return {\n    type: 'FETCH_TASKS_SUCCESS',\n    payload: newtasks,\n    currentPage,\n    sortField\n  }\n}\n\nconst tasksError = (error) => {\n  return {\n    type: 'FETCH_TASKS_FAILURE',\n    payload: error\n  }\n}\n\nconst authUser = (isLogin) => {\n  return {\n    type: 'AUTH_USER',\n    payload: isLogin\n  }\n}\n\nconst unAuthUser = (isLogin) => {\n  return {\n    type: 'UNAUTH_USER',\n    payload: isLogin\n  }\n}\n\nconst getTaskId = (taskId) => {\n  return {\n    type: 'GET_TASK_ID',\n    payload: taskId\n  }\n}\nconst fetchTasks = (taskstoreService, dispatch) => (page, sortField) => {\n  dispatch(tasksRequested())\n  taskstoreService.getTasks(page, sortField)\n    .then((data) => dispatch(tasksLoaded(data, page, sortField)))\n    .catch((err) => dispatch(tasksError(err)))\n}\n\nexport {\n  fetchTasks,\n  authUser,\n  unAuthUser,\n  getTaskId\n}\n","const compose = (...funcs) => (comp) => {\n  return funcs.reduceRight(\n    (wrapped, f) => f(wrapped), comp)\n}\n\nexport default compose\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport './task-list-header.css'\n\nconst ButtonAuth = ({ isLoggedIn, onUnAuth }) => {\n  return (\n    isLoggedIn\n      ? <Link to='/'>\n        <div\n          onClick={onUnAuth}\n          className='btn btn-outline-primary'>\n          Выйти\n        </div>\n      </Link>\n      : <Link to='/login'>\n        <div className='btn btn-outline-primary'>\n          Войти\n        </div>\n      </Link>\n  )\n}\n\nconst TaskListHeader = ({ isLoggedIn, onUnAuth }) => {\n  return (\n    <header className='task-list-header row'>\n      <div className='col-6'>\n        <Link to='/' className='logo text-dark'>\n          Список задач\n        </Link>\n      </div>\n      <div className='col-6 text-right'>\n        <ButtonAuth\n          isLoggedIn={isLoggedIn}\n          onUnAuth={onUnAuth} />\n        <Link to='/create'>\n          <div className='btn btn-primary'>\n            Добавить задачу\n          </div>\n        </Link>\n      </div>\n    </header>\n  )\n}\n\nexport default TaskListHeader\n","import TaskListHeader from './task-list-header'\n\nexport default TaskListHeader\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { withTaskstoreService } from '../../components/hoc'\nimport { unAuthUser } from '../../actions'\nimport { compose } from '../../utils'\n\nimport TaskListHeader from '../../components/task-list-header'\n\nclass TaskListHeaderContainer extends Component {\n  constructor (props) {\n    super(props)\n\n    this.handleUnAuth = () => {\n      this.props.unAuthUser(false)\n    }\n  }\n\n  render () {\n    const { isLoggedIn } = this.props\n\n    return (\n      <TaskListHeader\n        isLoggedIn={isLoggedIn}\n        onUnAuth={this.handleUnAuth} />\n    )\n  }\n}\n\nconst mapStateToProps = ({ isLoggedIn }) => {\n  return { isLoggedIn }\n}\n\nconst mapDispatchToProps = {\n  unAuthUser\n}\n\nexport default compose(\n  withTaskstoreService(),\n  connect(mapStateToProps, mapDispatchToProps)\n)(TaskListHeaderContainer)\n","import TaskSort from './task-sort'\n\nexport default TaskSort\n","import React from 'react'\n\nconst TaskSort = ({ data, sortField, currentPage, onSort }) => {\n  const buttons = data.map(({ name, label }) => {\n    const isActive = sortField === name\n    const btnClass = isActive ? 'btn-info' : 'btn-outline-secondary'\n    return (\n      <button\n        key={name}\n        type='button'\n        className={`btn ${btnClass}`}\n        onClick={() => onSort(currentPage, name)}>\n        {label}\n      </button>\n    )\n  })\n\n  return (\n    <div className='col-12'>\n      <div className='btn-group'>\n        {buttons}\n      </div>\n    </div>\n  )\n}\n\nexport default TaskSort\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { withTaskstoreService } from '../../components/hoc'\nimport { fetchTasks } from '../../actions'\nimport { compose } from '../../utils'\n\nimport TaskSort from '../../components/task-sort'\n\nclass TaskSortContainer extends Component {\n  constructor (props) {\n    super(props)\n\n    this.buttons = [\n      {\n        name: 'id',\n        label: 'Default'\n      },\n      {\n        name: 'username',\n        label: 'Username'\n      },\n      {\n        name: 'email',\n        label: 'Email'\n      },\n      {\n        name: 'status',\n        label: 'Status'\n      }\n    ]\n  }\n\n  render () {\n    const { sortField, currentPage, fetchTasks } = this.props\n\n    return (\n      <TaskSort\n        data={this.buttons}\n        sortField={sortField}\n        currentPage={currentPage}\n        onSort={fetchTasks}\n      />\n    )\n  }\n};\n\nconst mapStateToProps = ({ currentPage, sortField }) => {\n  return { currentPage, sortField }\n}\n\nconst mapDispatchToProps = (dispatch, { taskstoreService }) => {\n  return {\n    fetchTasks: fetchTasks(taskstoreService, dispatch)\n  }\n}\n\nexport default compose(\n  withTaskstoreService(),\n  connect(mapStateToProps, mapDispatchToProps)\n)(TaskSortContainer)\n","import Spinner from './spinner'\n\nexport default Spinner\n","import React from 'react'\n\nconst Spinner = () => {\n  return <div>loading...</div>\n}\n\nexport default Spinner\n","import ErrorIndicator from './error-indicator'\n\nexport default ErrorIndicator\n","import React from 'react'\n\nconst ErrorIndicator = () => {\n  return <div>Error!</div>\n}\n\nexport default ErrorIndicator\n","import TaskListItem from './task-list-item'\n\nexport default TaskListItem\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport './task-list-item.css'\n\nconst TaskListItem = ({ task, isLoggedIn }) => {\n  const { id, username, email, text, status } = task\n  return (\n    <div className='card'>\n      <div className='card-body'>\n        <div>\n          <h4 className='card-title'>{username}</h4>\n          <h6 className='card-subtitle mb-2 text-muted'>{email}</h6>\n          <p className='card-text'>\n            {text}\n          </p>\n        </div>\n        {\n          status === 10 &&\n          <div>\n            <span className='badge badge-success'>Выполненно!</span>\n          </div>\n        }\n        {\n          isLoggedIn &&\n          <Link\n            to={{\n              pathname: '/edit/:id',\n              id: id\n            }}>\n            Редактировать\n          </Link>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default TaskListItem\n","import TaskList from './task-list'\n\nexport default TaskList\n","import React, { Fragment } from 'react'\n\nimport TaskListItem from '../task-list-item'\n\nconst TaskList = ({ tasks, isLoggedIn }) => {\n  return (\n    <Fragment>\n      {\n        tasks.map((task) => {\n          return (\n            <div className='col-sm-4' key={task.id}>\n              <TaskListItem task={task} isLoggedIn={isLoggedIn} />\n            </div>\n          )\n        })\n      }\n    </Fragment>\n  )\n}\n\nexport default TaskList\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { withTaskstoreService } from '../../components/hoc'\nimport { fetchTasks } from '../../actions'\nimport { compose } from '../../utils'\n\nimport Spinner from '../../components/spinner'\nimport ErrorIndicator from '../../components/error-indicator'\nimport TaskList from '../../components/task-list'\n\nclass TaskListContainer extends Component {\n  componentDidMount () {\n    this.props.fetchTasks(this.props.currentPage, this.props.sortField)\n  }\n\n  render () {\n    const { tasks, isLoggedIn, loading, error } = this.props\n\n    if (loading) {\n      return <Spinner />\n    }\n\n    if (error) {\n      return <ErrorIndicator />\n    }\n\n    if (!tasks || !tasks.length) {\n      return <p>Список задач пуст</p>\n    }\n\n    return (\n      <TaskList tasks={tasks} isLoggedIn={isLoggedIn} />\n    )\n  }\n}\n\nconst mapStateToProps = ({ tasks, isLoggedIn, currentPage, sortField, loading, error }) => {\n  return { tasks, isLoggedIn, currentPage, sortField, loading, error }\n}\n\nconst mapDispatchToProps = (dispatch, { taskstoreService }) => {\n  return {\n    fetchTasks: fetchTasks(taskstoreService, dispatch)\n  }\n}\n\nexport default compose(\n  withTaskstoreService(),\n  connect(mapStateToProps, mapDispatchToProps)\n)(TaskListContainer)\n","import Pagination from './pagination'\n\nexport default Pagination\n","import React from 'react'\n\nconst Pagination = (props) => {\n  const {\n    currentPage,\n    itemsPerPage,\n    totalTaskCount,\n    handleFirstPageButtonClick,\n    handleBackButtonClick,\n    handleNextButtonClick,\n    handleLastPageButtonClick\n  } = props\n\n  return (\n    <nav aria-label='...' className='col-12'>\n      <ul className='pagination'>\n        <li className={'page-item' + (currentPage === 1 && ' disabled')}>\n          <span\n            onClick={handleFirstPageButtonClick}\n            className='page-link'>\n            <span aria-hidden='true'>&#8592;</span> First\n          </span>\n        </li>\n        <li className={'page-item' + (currentPage === 1 && ' disabled')}>\n          <span\n            className='page-link'\n            onClick={handleBackButtonClick}>\n            Previous\n          </span>\n        </li>\n        <li className={'page-item' + (currentPage >= Math.ceil(totalTaskCount / itemsPerPage) && ' disabled')}>\n          <span\n            className='page-link'\n            onClick={handleNextButtonClick}>\n            Next\n          </span>\n        </li>\n        <li className={'page-item' + (currentPage >= Math.ceil(totalTaskCount / itemsPerPage) && ' disabled')}>\n          <span\n            className='page-link'\n            onClick={handleLastPageButtonClick}>\n            Last <span aria-hidden='true'>&#8594;</span>\n          </span>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Pagination\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { withTaskstoreService } from '../../components/hoc'\nimport { fetchTasks } from '../../actions'\nimport { compose } from '../../utils'\n\nimport Pagination from '../../components/pagination'\n\nclass PaginationContainer extends Component {\n  constructor (props) {\n    super(props)\n\n    this.onChangePage = (page) => {\n      this.props.fetchTasks(Number(page), this.props.sortField)\n    }\n\n    this.handleFirstPageButtonClick = () => {\n      this.onChangePage(1)\n    }\n\n    this.handleBackButtonClick = () => {\n      this.onChangePage(this.props.currentPage - 1)\n    }\n\n    this.handleNextButtonClick = () => {\n      this.onChangePage(this.props.currentPage + 1)\n    }\n\n    this.handleLastPageButtonClick = () => {\n      this.onChangePage(\n        Math.max(1, Math.ceil(this.props.totalTaskCount / this.props.itemsPerPage))\n      )\n    }\n  }\n\n  render () {\n    let { currentPage, itemsPerPage, totalTaskCount } = this.props\n\n    return (\n      <Pagination\n        currentPage={currentPage}\n        itemsPerPage={itemsPerPage}\n        totalTaskCount={totalTaskCount}\n        handleFirstPageButtonClick={this.handleFirstPageButtonClick}\n        handleBackButtonClick={this.handleBackButtonClick}\n        handleNextButtonClick={this.handleNextButtonClick}\n        handleLastPageButtonClick={this.handleLastPageButtonClick}\n      />\n    )\n  }\n}\n\nconst mapStateToProps = ({ totalTaskCount, currentPage, itemsPerPage, sortField }) => {\n  return { totalTaskCount, currentPage, itemsPerPage, sortField }\n}\n\nconst mapDispatchToProps = (dispatch, { taskstoreService }) => {\n  return {\n    fetchTasks: fetchTasks(taskstoreService, dispatch)\n  }\n}\n\nexport default compose(\n  withTaskstoreService(),\n  connect(mapStateToProps, mapDispatchToProps)\n)(PaginationContainer)\n","import React, { Fragment } from 'react'\n\nimport TaskSortContainer from '../../containers/task-sort-container'\nimport TaskListContainer from '../../containers/task-list-container'\nimport PaginationContainer from '../../containers/pagination-container'\n\nconst HomePage = () => {\n  return (\n    <Fragment>\n      <div className='row'>\n        <TaskSortContainer />\n      </div>\n      <div className='row'>\n        <TaskListContainer />\n      </div>\n      <div className='row'>\n        <PaginationContainer />\n      </div>\n    </Fragment>\n  )\n}\n\nexport default HomePage\n","import Input from './input'\n\nexport default Input\n","import React, { Fragment } from 'react'\n\nimport './input.css'\n\nconst Input = ({\n  labelText,\n  placeholder,\n  name,\n  value,\n  type,\n  pattern,\n  title,\n  isReadOnly\n}) => {\n  const hasReadOnly = isReadOnly !== 'undefined' ? isReadOnly : false\n  return (\n    <Fragment>\n      <label htmlFor={name}>{labelText}</label>\n      <input\n        className='form-control'\n        placeholder={placeholder}\n        id={name}\n        name={name}\n        value={value !== 'undefined' ? value : ''}\n        type={type}\n        pattern={pattern}\n        title={title || ''}\n        autoComplete='on'\n        required\n        readOnly={hasReadOnly}\n      />\n    </Fragment>\n\n  )\n}\n\nexport default Input\n","import LoginForm from './login-form'\n\nexport default LoginForm\n","import React from 'react'\n\nimport Input from '../forms/input'\n\nconst LoginForm = ({ onSubmit, isLoggedIn }) => {\n  return (\n    <form\n      id='login-form'\n      onSubmit={onSubmit}>\n\n      <div className='form-group'>\n        <Input\n          labelText={'Введите имя'}\n          placeholder='Имя'\n          name='username'\n          type='text'\n          pattern='[a-zA-Z0-9._%+-]{1,15}'\n          title='Check yor name'\n        />\n      </div>\n\n      <div className='form-group'>\n        <Input\n          labelText={'Введите ваш пароль'}\n          placeholder='Пароль'\n          name='password'\n          type='password'\n          pattern='[0-9]{1,3}$'\n          title='Check your password'\n        />\n      </div>\n\n      <button className='btn btn-success'>Войти</button>\n    </form>\n  )\n}\n\nexport default LoginForm\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport { withTaskstoreService } from '../../components/hoc'\nimport { authUser, unAuthUser } from '../../actions'\nimport { compose } from '../../utils'\n\nimport LoginForm from '../../components/login-form'\n\nclass LoginFormContainer extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      authState: 'pending'\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleSubmit (event) {\n    event.preventDefault()\n    const data = new FormData(event.target)\n\n    let username = data.get('username')\n    let password = data.get('password')\n\n    let isAdmin = username === 'admin' && password === '123'\n\n    if (isAdmin) {\n      this.props.authUser(isAdmin)\n      this.setState({ authState: 'done' })\n    }\n  }\n\n  render () {\n    const { isLoggedIn } = this.props\n\n    if (this.state.authState === 'done') {\n      return <Redirect to='/' />\n    }\n\n    return (\n      <LoginForm onSubmit={this.handleSubmit} isLoggedIn={isLoggedIn} />\n    )\n  }\n}\n\nconst mapStateToProps = ({ isLoggedIn }) => {\n  return { isLoggedIn }\n}\n\nconst mapDispatchToProps = {\n  authUser,\n  unAuthUser\n}\n\nexport default compose(\n  withTaskstoreService(),\n  connect(mapStateToProps, mapDispatchToProps)\n)(LoginFormContainer)\n","import React from 'react'\n\nimport LoginFormContainer from '../../containers/login-form-container'\n\nconst LoginPage = () => {\n  return (\n    <LoginFormContainer />\n  )\n}\n\nexport default LoginPage\n","import Textarea from './textarea'\n\nexport default Textarea\n","import React, { Fragment } from 'react'\n\nconst Textarea = ({\n  labelText,\n  placeholder,\n  name,\n  value,\n  maxLength\n}) => {\n  return (\n    <Fragment>\n      <label htmlFor={name}>{labelText}</label>\n      <textarea\n        className='form-control'\n        placeholder={placeholder}\n        id={name}\n        name={name}\n        defaultValue={value !== 'undefined' ? value : ''}\n        maxLength={maxLength}\n        required />\n    </Fragment>\n  )\n}\n\nexport default Textarea\n","import React from 'react'\n\nimport Input from '../forms/input'\nimport Textarea from '../forms/textarea'\n\nconst InputName = ({ isUserName }) => {\n  const labelText = 'Введите имя'\n  const placeholder = 'Имя'\n  const name = 'username'\n  const pattern = '[a-zA-Z0-9._%+-]{1,15}'\n  const title = 'Name must be no more than 15 characters.'\n\n  return (\n    isUserName\n      ? <Input\n        labelText={labelText}\n        name={name}\n        value={isUserName}\n        type='text'\n        isReadOnly\n      />\n      : <Input\n        labelText={labelText}\n        placeholder={placeholder}\n        name={name}\n        type='text'\n        pattern={pattern}\n        title={title}\n      />\n  )\n}\n\nconst TaskCreateForm = ({ onSubmit, isLoggedIn, userName }) => {\n  const isUserName = isLoggedIn ? userName : ''\n\n  return (\n    <form\n      id='task-create-form'\n      onSubmit={onSubmit} >\n      <div className='form-group'>\n        <InputName isUserName={isUserName} />\n      </div>\n\n      <div className='form-group'>\n        <Input\n          labelText={'Введите ваш e-mail'}\n          placeholder='e-mail'\n          name='email'\n          type='email'\n          pattern='^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$'\n          title='Check your email'\n        />\n      </div>\n\n      <div className='form-group'>\n        <Textarea\n          labelText={'Введите текст задачи'}\n          placeholder='Текст'\n          name='text'\n          maxLength='100'\n        />\n      </div>\n\n      <button className='btn btn-success'>Отправить задачу!</button>\n    </form>\n  )\n}\n\nexport default TaskCreateForm\n","import TaskCreateForm from './task-create-form'\n\nexport default TaskCreateForm\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { withTaskstoreService } from '../../components/hoc'\nimport { compose } from '../../utils'\n\nimport TaskCreateForm from '../../components/task-create-form'\n\nclass TaskCreateContainer extends Component {\n  constructor (props) {\n    super(props)\n\n    this.handleSubmit = (event) => {\n      event.preventDefault()\n      const data = new FormData(event.target)\n      this.props.taskstoreService.postNewTask(data)\n      document.getElementById('task-create-form').reset()\n    }\n  }\n\n  render () {\n    const { isLoggedIn, userName } = this.props\n\n    return (\n      <TaskCreateForm\n        onSubmit={this.handleSubmit}\n        isLoggedIn={isLoggedIn}\n        userName={userName} />\n    )\n  }\n}\n\nconst mapStateToProps = ({ isLoggedIn, userName }) => {\n  return { isLoggedIn, userName }\n}\n\nexport default compose(\n  withTaskstoreService(),\n  connect(mapStateToProps)\n)(TaskCreateContainer)\n","import React from 'react'\nimport TaskCreateContainer from '../../containers/task-create-container'\n\nconst TaskCreatePage = () => {\n  return <TaskCreateContainer />\n}\n\nexport default TaskCreatePage\n","import TaskEditForm from './task-edit-form'\n\nexport default TaskEditForm\n","import React, { Component } from 'react'\n\nimport Textarea from '../forms/textarea'\n\nclass TaskEditForm extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      status: this.props.editTaskStatus\n    }\n\n    this.handleChecked = () =>\n      this.setState(({ status }) => {\n        return { status: status === 0 ? 10 : 0 }\n      })\n  }\n\n  render () {\n    const { onSubmit, editTaskText } = this.props\n\n    return (\n      <form\n        id='task-edit-form'\n        onSubmit={onSubmit} >\n\n        <div className='form-group'>\n          <Textarea\n            labelText={'Редактировать текст задачи'}\n            name='text'\n            maxLength='100'\n            value={editTaskText}\n          />\n        </div>\n\n        <div className='form-group'>\n          <label>\n            <input type='checkbox' onChange={this.handleChecked} checked={this.state.status} />&nbsp; Задача выполненна\n          </label>\n        </div>\n\n        <input type='hidden' name='status' value={this.state.status} />\n        <button className='btn btn-success'>Редактировать задачу</button>\n      </form>\n    )\n  }\n}\n\nexport default TaskEditForm\n","import React, { Component } from 'react'\nimport md5 from 'js-md5'\nimport { connect } from 'react-redux'\nimport { Redirect, Link } from 'react-router-dom'\n\nimport { withTaskstoreService } from '../../components/hoc'\nimport { compose } from '../../utils'\n\nimport TaskEditForm from '../../components/task-edit-form'\n\nclass TaskEditContainer extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      isEdit: false\n    }\n\n    this.encodeURI = (str) => {\n      return encodeURI(str).replace(/%5B/g, '[').replace(/%5D/g, ']')\n    }\n\n    this.handleSubmit = (event) => {\n      event.preventDefault()\n\n      const data = new FormData(event.target)\n\n      const taskText = this.encodeURI(data.get('text'))\n      const taskStatus = this.encodeURI(data.get('status'))\n      const taskToken = this.encodeURI('beejee')\n\n      const params = 'status=' + taskStatus + '&text=' + taskText + '&token=' + taskToken\n\n      var taskSignature = md5.create()\n      taskSignature.update(params)\n\n      const paramsToServer = params + '&signature=' + taskSignature\n      this.props.taskstoreService.editTask(this.props.editTask.id, paramsToServer)\n\n      this.setState(({ isEdit }) => {\n        return {\n          isEdit: true\n        }\n      })\n    }\n  }\n\n  render () {\n    const { isLoggedIn, userName, editTask } = this.props\n\n    if (!isLoggedIn) {\n      return (\n        <div>\n          Чтобы редактировать задачи нужно&nbsp;\n          <Link to='/login'>войти</Link>\n        </div>\n      )\n    }\n\n    if (this.state.isEdit) {\n      return <Redirect to='/' />\n    }\n\n    return (\n      <TaskEditForm\n        onSubmit={this.handleSubmit}\n        isLoggedIn={isLoggedIn}\n        userName={userName}\n        editTaskText={editTask.text}\n        editTaskStatus={editTask.status} />\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { isLoggedIn, userName } = state\n  const editTask = state.tasks.find(task => task.id === ownProps.taskEditId)\n\n  return { isLoggedIn, userName, editTask }\n}\n\nexport default compose(\n  withTaskstoreService(),\n  connect(mapStateToProps)\n)(TaskEditContainer)\n","import React from 'react'\nimport TaskEditContainer from '../../containers/task-edit-container'\n\nconst TaskEditPage = (props) => {\n  const taskId = props.location.id\n  return <TaskEditContainer taskEditId={taskId} />\n}\n\nexport default TaskEditPage\n","import App from './app'\n\nexport default App\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport TaskListHeaderContainer from '../../containers/task-list-header-container'\nimport { HomePage, LoginPage, TaskCreatePage, TaskEditPage } from '../pages'\n\nconst App = () => {\n  return (\n    <main role='main' className='container'>\n      <TaskListHeaderContainer />\n      <Switch>\n        <Route\n          path='/'\n          component={HomePage}\n          exact />\n        <Route\n          path='/login'\n          component={LoginPage}\n        />\n        <Route\n          path='/create'\n          component={TaskCreatePage}\n        />\n        <Route\n          path='/edit/:id'\n          component={TaskEditPage}\n        />\n      </Switch>\n    </main>\n  )\n}\n\nexport default App\n","import ErrorBoundry from './error-boundry'\n\nexport default ErrorBoundry\n","import React, { Component } from 'react'\nimport ErrorIndicator from '../error-indicator'\n\nexport default class ErrorBoundry extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch () {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return <ErrorIndicator />\n    }\n\n    return this.props.children\n  }\n}\n","\nconst initialState = {\n  tasks: [],\n  totalTaskCount: 0,\n  currentPage: 1,\n  itemsPerPage: 3,\n  sortField: 'id',\n  loading: true,\n  error: null,\n  isLoggedIn: false,\n  userName: 'admin'\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_TASKS_REQUEST':\n      return {\n        ...state,\n        tasks: [],\n        loading: true,\n        error: null\n      }\n\n    case 'FETCH_TASKS_SUCCESS':\n      return {\n        ...state,\n        tasks: action.payload.tasks,\n        totalTaskCount: action.payload.total_task_count,\n        currentPage: action.currentPage,\n        sortField: action.sortField,\n        loading: false,\n        error: null\n      }\n\n    case 'FETCH_TASKS_FAILURE':\n      return {\n        ...state,\n        tasks: [],\n        loading: false,\n        error: action.payload\n      }\n\n    case 'AUTH_USER':\n      return {\n        ...state,\n        isLoggedIn: action.payload\n      }\n\n    case 'UNAUTH_USER':\n      return {\n        ...state,\n        isLoggedIn: action.payload\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import { createStore } from 'redux'\nimport reducer from './reducers'\n\nconst store = createStore(reducer)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport App from './components/app'\nimport ErrorBoundry from './components/error-boundry'\nimport TaskstoreService from './services/taskstore-service'\nimport { TaskstoreServiceProvider } from './components/taskstore-service-context'\n\nimport store from './store'\n\nconst taskstoreService = new TaskstoreService()\n\nReactDOM.render(\n  <Provider store={store}>\n    <ErrorBoundry>\n      <TaskstoreServiceProvider value={taskstoreService}>\n        <Router basename=\"/natafrontdev\">\n          <App />\n        </Router>\n      </TaskstoreServiceProvider>\n    </ErrorBoundry>\n  </Provider>,\n  document.getElementById('root')\n)\n","export default class TaskstoreService {\n  _apiBase = 'https://uxcandy.com/~shapoval/test-task-backend';\n  _apiDeveloper = '?developer=Natalia'\n\n  getResource = async (url) => {\n    const res = await fetch(`${this._apiBase}${url}`, {\n      cache: 'no-cache',\n      redirect: 'follow',\n      referrer: 'no-referrer'      \n    })\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` +\n        `, received ${res.status}`)\n    }\n    return await res.json()\n  };\n\n  postResource = async (url, data) => {\n    const res = await\n    fetch(`${this._apiBase}${url}${this._apiDeveloper}`, {\n      method: 'POST',\n      body: data\n    })\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` +\n        `, received ${res.status}`)\n    }\n    return await res.json()\n  };\n\n  editResource = async (url, params) => {\n    const res = await\n    fetch(`${this._apiBase}${url}${this._apiDeveloper}`, {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      redirect: 'follow',\n      referrer: 'no-referrer',\n      body: params\n    })\n\n    return res\n  }\n\n  getTasks = async (page, sort_field) => {\n    const res = await this.getResource(`/${this._apiDeveloper}&page=${page}&sort_field=${sort_field}`)\n    return res.message\n  };\n\n  postNewTask = async (formData) => {\n    const res = await this.postResource('/create', formData)\n    return res.results\n  };\n\n  editTask = async (id, params) => {\n    const res = await this.editResource(`/edit/${id}`, params)\n    return res\n  }\n}\n"],"sourceRoot":""}